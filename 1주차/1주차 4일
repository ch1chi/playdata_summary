반복문
for 문
문법: for(초기값; 조건식; 증감식) { ... }
초기값과 증감식을 여러개씩 적을수도 있다.
for(int n=1, m=1; n<10 && m<2; n+=2, m++){  ... }
모든 제어문은 중첩 가능하다.
if() { if () { for() { ... } } }
while 문
=> 용도: 반복횟수 예측이 어려울때 주로 사용됨.
무한루프에서 사용됨.
문법:
초기값
while (조건식) {
증감식 
}
while 문 은 반복횟수 예측이 힘들다.
반복횟수 예측이 힘들땐  while, 몇번돌지 알땐  for 문을 사용하면 된다.
모든 for 문과 while 문은 서로 변환가능하다.
무한루프 문법:
while(true){
if(무한루프에서 빠져나올 조건식) { break; }
}
do~while 문
문법:
do { ... } while (조건식) ;
break 와 continue
반복문에서 사용가능한 2가지 키워드
break - 가장 가까운 반복문을 탈출한다.
continue - 가장 가까운 반복문의 끝 "}" 으로 가서 다시 반복한다.
따라서 continue문 밑의 문장들이 skip이 된다.

배열
단 하나의 변수 (배열명)으로 여러 데이터를 효율적으로 관리할수 있다.
사용법:
배열 선언
배열 생성 (데이터를 담을 그릇의 크기를 지정)
그릇의 크기는 고정된 값이다. (수정 불가능)
초기화
한 배열에 하나의 같은 데이터 타입의 데이터들만 저장할수있다.
배열 선언
문법: 데이터형 [] 배열명;  또는 데이터형 배열명 [] ;
첫번째 문법을 권장하지만 두개다 가능하다.
배열 생성
문법: 배열명 = new 데이터형[크기] ;
배열은 참조형 인스턴스변수이므로 new를 사용했을때 모든 배열값이 0으로 자동으로 초기화 된다.
특정 배열 데이터 접근법
문법: 배열명[인덱스]
출력 방법
하나하나 출력
sysout(n[0]); sysout(n[1]); sysout(n[2])
반복문을 이용한 출력
for(int i=0; i<n.length; i++){ sysout(n[i]); }
foreach 반복문을 이용한 출력
Arrays 클래스의 toString 메서드 이용한 출력
import java.util.Arrays;
sysout (Arrays.toString(배열));
배열 초기화
각 원소에 값을 넣어준다
n[0] = 1;
n[1] = 2;
new 없이 값만 이용
int[] n = { 1, 2 };
new + 값 이용
int [] n = new int[]{1,2};

기본형 / 참조형 차이
int m;
변수선언, 기본형 변수, int형 변수, 로컬변수(stack) 에 저장됨. 변수에는 실제값인 int가 저장됨.
int[] n;
배열선언, 참조형 변수, int형 타입의 배열, 로컬변수, n에는 주소값이 저장되고 배열에 int값이 저장된다.
n = new int[3];
크기 3을 가진 영역이 서로 연결된 상태로 heap 메모리에 만들어진다.
heap 메모리에 만들어진 값은 자동으로 초기화 된다. (0으로 초기화됨).
배열명에는 배열의 주소값이 저장된다.
n[3]
없는 요소 접근시 array index out of bounds exception 이 발생한다.
컴파일은 에러없이되지만 실행시 에러가 발생한다.
String m = "홍길동";
참조형 변수
"홍길동" literal (리터럴) 은 method area 에 저장된다.
String m = new String("홍길동"); 했을경우에는new 키워드가 불렸으므로 Heap 에 저장된다.
String[] n;
참조형 변수, String 타입의 배열, 로컬변수,
n = new String[2];
new 키워드가 사용되었으므로 heap 에 저장되고
자동으로 null 으로 초기화 된다.
n 에 배열의 주소값이 저장된다.
n[0] = "홍길동1; n[1] = "홍길동2"




Java에서 new 키워드가 사용될경우 참조형 변수가 heap 메모리에 만들어진다.

데이터 저장 방법
변수
하나의 값만 저장 가능
기본형 변수, 참조형 변수 모두 가능
배열
여러개 저장 가능
기본형 배열, 참조형 배열 모두 가능하다.
같은 데이터만 저장 가능하다
크기변경이 불가능하다
인덱스를 이용해서 배열의 요소 접근한다.
index는 0부터 시작함
배열의 크기는 배열명.length 로 알수 있다.
컬렉션 (*)
여러개 저장 가능

Function call
main() -> int_change() -> intArr_change
각 함수 호출 후 다시 원래 자리로 돌아간다.
각 함수의 메모리는 Stack에 할당되고 함수가 끝날때 차지했던 메모리는 없어진다.
parameter를 넘겨줄때
기본형 데이터
기본형 데이터는 메서드 호출해서 전달시 실제값이 전달된다. ==> 복사형태로 사용됨.
따라서 넘겨받은곳에서 임의로 데이터를 변경해도 원본값을 영향받지 않는다.
참조형 데이터
참조형 데이터는 메서드 호출해서 전달시 주소값이 전달된다. ==> 원본과 같은 주소를 갖게 된다.
따라서 넘겨받은곳에서 임의로 데이터를 변경하면 원본값이 영향을 받는다.









