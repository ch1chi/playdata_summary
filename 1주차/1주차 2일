JDK = 개발자  ,  JRE = 사용자 

JVM = java Vitrtual machine == class 파일
O/S Operating System = 윈도우10 , 맥 , 리눅스 등등


 
################         실습 내용        ##################
public class PDT_char {

	public static void main(String[] args) {
               //char 정리 
		       // 하나의 문자를 정리 표현   --> char(캐릭터)  타입이 관리                   ------> 최종 결과는  A
                                                                                                           홍
                                                                                                           홍길동
		System.out.println('A');
		System.out.println('홍');
		
		 //여러개의 문자열 표현 ===> 이게 "문자열"이다  --> String 타입 
		System.out.println("홍길동");
		
	}

}

★★★★★★★★★★★
escape 문자는 특별한 기능을 가진다.  문자 2개를 쓰지만 "문자열"이 아닌 '문자'로 표현한다.

★★★
 \t 는  화면에서 3칸 띄어쓰기를 한 효과를 지닌다.  똑같이 사용하려면  Tab를 1번  ==  스페이스 3번치기 랑 똑같은 효과를 지닌다.
 \n 는  줄 바꿈을 표현한다.
 \" 는  \을 화면에 나타내려하려고 할 때 쓰이는 소스코드.
 \\ 는 화면에서 파일 경로를 읽을 때 1개를 쓰면 생략이 되니까 그때 2개를 넣으면 표시가 되면서 화면에 뜨니까 이것 사용할 때 쓰인다.
 
  $$$$$$$$$$$$$$$    강사가 보낸 파일을 받아서 써보고 싶을 때는 EXPORT_ 파일들이 오게 된다 그럴 때는?????   $$$$$$$$$$$$$$$
  1.  알집을 받아서 다운을 받는다.
  2.  자바 왼쪽 창에 가서 오른쪽 클릭을 한 후,  Gerneral 클릭 후 , 익스플로팅 프로젝트 인투 워크플레이스 클릭 후  아랫창에 2번째 클릭
  3.  거기서 끝내지 말고 블라우저 클릭후 그 알집 받은 폴더를 클릭 후 마무리
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// 정수형의 값의 범위
		// 기본형에 해당되는 클래스를 제공한다.
		// ex)) byte 기본형에 해당되는 Byte 클래스가 제공된다.
		
		/*
		  여러 줄의 주석을 하려면 이렇게  하면 된다.
		  
		  기본형             wrapper 클래스
		  byte               Byte
		  short              Short
		  int                Integer
		  long               Long
		  
		  float              Float
		  double             Double
		  
		  char               Character
		  
		  boolean            Boolean
		 */
		 
		 
 프로그램에서 사용하는 데이터(리터럴)를 저장하기 위한 용도로 사용된다. 
1. 복수개의 값이 아닌, 단 하나의 값만 저장이 가능하다. 복수개의 값을
2. 변수에는 다양한 타입의 값을 저장하지 못하고,
    한가지 타입만 저장 가능하다.
3. 저장된 데이터는 언제든지 변경이 가능하기 때문에
     ‘변경이 가능한 수’ 즉, 변수라고 부른다.
4. 변경이 불가능한 수는 ‘상수’라고 부른다.
5. 기본형 데이터를 저장하면 ‘기본형 변수’ 라고 하고, 
     참조형 데이터를 저장하면 ‘참조형 변수’라고 한다.
     
     ********* 참조형은 모든 크기는 4Byte 로  고정이다. *****************
★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★     
     기본형 변수 : int num = 10, 
                   큰 네모 안의 값이 10임
	           실제값
     
     
     
     참조형 변수 : String name = "홍길동"   &&참조란?? ---> 가르킨다 라는 의미
                   큰 네모 안의 값을 설정할 수 없음 ( 실제값이 있는 주소값으로 이동 )
		   

1) 변수 선언
기본형 변수와 참조형 변수 차이점
변수 선언은 자바 프로그램에게 저장 시킬 데이터형과 코드에서 식별해서 사용하기 위한
용도인 변수명을 사용하여 표현한다.
변수 선언은 사용자가 지정한 식별자로서 식별자 규칙에 맞게 지정해야 된다. 
동일한 변수이름으로 중복 선언이 불가능하다. 
예> int num; //기본형 변수
String name; //참조형 변수
int age=10,height,weight; //권장 안함.
     
★★★★★★★★★★★★   
     변수명에서 String은  클래스이다. 
   System.out.println("이름 : "+name);  //  + 는 더한다는 의미가 아니라 연결이라는 의미
★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★   
   /* 변수 종류 3가지
		 *   1) 로컬 변수 (local variable)
		 *      - 메서드  안에서  선언ㅌ`
		 *      - 저장되는 메모리명 : 스택 ( stack )
		 *      - 변수의 삶 ( variable lifecycle )은 
		 *         메서드가 호출될 때 생성되고, 메서드가 끝나면 제거된다.
		 *         ( 자동으로 호출되는 유일한 메서드가 main 메서드, 역으로 main 메서드를 제외한  
		 *           메서드는 반드시 호출해야 수행된다. )
		 *      - 주의할 점은 반드시 사용전에 초기화해야 된다.
		 *      - 
		 *   2) 인스턴스 변수(instance variable)
		 *      - 메서드 밖에서 선언
		 *      - 저장되는 메모리명 : 힙 ( heap )
		 *      - 변수의 삶 ( variable lifecycle )은 
		 *        객체(클래스)가 생성될 때 생성~ 객체(클래스)가 소멸될 때 제거된다.
		 *        ===> 클래스 생성 문법 : new 클래스명 (); 
		 *      - 초기화 하지 않아도 자동으로 초기화 된다. 
		 *      
		 *      - ex))  정수 : 0
		 *              실수 : 0.0
		 *              논리 : false
		 *              문자 : /u0000
		 *              
		 *              참조 : null
		 *   3) 클래스 변수(class variable , static variable)
		 *      - 메서드 밖에서 선언  , static 키워드를 지정
		 *      - 저장되는 메모리명 : method area 
		 *      - 변수의 삶 ( variable lifecycle )은 
		 *        프로그램 실행할 때 생성~ 프로그램 종료될 때 제거된다.
		 *      - 초기화 하지 않아도 자동으로 초기화 된다. 
		 *      
		 *        
		 * 3. 변수 스코프 ( scope ) => 변수를 사용할 수 있는 범위 의미. 기본적으로 블럭 ( scope )
		 *     자바 언어는 변수가 블럭 scope를 따른다고 말한다.
		 
		 
	
		 *     
		 */
   
   
   
                int num=100;                 // 로컬 변수 , 기본형 변수 , int 타입의 변수
		String address;              // 로컬 변수 , 참조형 변수 , String 타입의 변수

		System.out.println(num);     // 로컬 변수인데 초기화가 되어서 에러가 나지않는다.
		System.out.println(address); // 로컬 변수인데 초기화가 안되어서 에러가 발생한다.
		
	---------------------------------------------------------------------------------------------------------------------------	
		public class CastingTest1 {

	public static void main(String[] args) {
		// 기본형 타입의 묵시적 형변환
		
		//1. byte -> short -> int -> long -> float -> double
		
		
		byte   b  = 1;
		short  b2 = b;
		int    b3 = b2;
		long   b4 = b3;
		
		float b5 = b4;
		double b6 = b5;
		
		//역 실습
		int x = 10;
		short x2 = (short) x;          // x는 형변환 명시적으로 한 것 
		
		//2. char -> int
		char c = 'A';
		int c2 =  c;
		System.out.println(c2);       // 값은 65  .  왜냐면 아스키코드값이라 그럼
		
		char k = 'a';
		int k2 = k;
		System.out.println(k2);       // 값은 97  .  아스키코드값.
		  
		//char가 연산이 가능하다.
		System.out.println('A'+1);
		
		//역실습   int --> char
		char xyz = 65;                //묵시적 형 변환
		char xyz2 = (char)65;         // 명시적 형 변환 
	
		
		System.out.println(xyz+""+xyz2);
	}

}
-----------------------------------------------------------------------------------------------------------------------------
public class CastingTest2 {

	public static void main(String[] args) {
		//3.     int 보다 작은 타입의 연산 결과는 int로 반환 된다.
		
		short s = 10;
		short s2 = 5;
		//short s3 = s + s2;   //int는 4바이트인데  쇼트는 2바이트다 
		
		                       // 그렇다면 어떻게 해결을 해야할까???
		
		//해결 1                                                          &&&&&   해결책  &&&&
		int ss = s+s2;                    // ★★★★★ byte건 short건 결국 더하면 새로운 값이 등장하기 때문에 int값으로 받아야한다.★★★★★
		//해결 2
		short  ss2  = (short) (s+s2);
//		short  ss3  = (short)s+s2;    ---> 이건 왜 주석했냐면, 결합 방식을 잘못해서 결과값이 안나옴 그래서 주석처리 함.
		
		//4.  연산할 때 작은 타입하고 큰 타입이면 결과는 큰 타입이 변환 된다.
		
		int y = 10;
		double y2 = 3.14;
		double result = y + y2;
		
		/*
		 *        기본형 및 참조형도 데이터 형 변환이 가능하다.
		 *         즉, 참조형인 클래스도 형변환이 가능하다.
		 *        예) A 클래스 --> B 클래스 타입으로 변환 가능하다.
		 *            단, A 와 B의 관계가 상속 관계이어야 한다. 
		 *            역으로 변환되는 클래스들간의 관계가 상속 관계가 아니면 형 변환이 안된다.
		 * 
		 * 
		 */
		
		

	}

}
----------------------------------------------------------------------------------------------------------------------------------------------
 
 
   문법: 
     final 데이터형 상수명=값;
     
     //  모니터에 출력하는 표준 출력 방법
		
		/*
		 *  1. System.out.println(값)
		 *     ===> 새로운 라인을 생성하고 출력한다.
		 *     
		 *  2. System.out.print(값)   
		 *     ===> 새로운 라인을 생성하지 않고 출력한다.
		 *          따라서 한 줄에 출력 된다.
		 *  3. System.out.printf(    ,값1,값2,값3    ) ---> 2개 이상이 오지만, 정해지진 않는다.
		 *  
		 *     값이 문자열  : %s
		 *     값이 문자    : %c
		 *     값이 정수    : %d
		 *     값이 실수    : %f
		 *     값이 불린    : %b
		 *     그리고  Print 처럼  한줄로만 나온다.
		 *     
		 *     ===> 출력할 때 특정 포맷을 만들기 위해서 사용된다. 
		 
		 
		 
		 *     
