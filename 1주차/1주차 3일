1. 연산자
	1. 연산자에는 우선순위가 있다.
	2. 연산되는 데이터를 피연산자 (operand) 라고 한다.
	3. 몫 (/) 과 나머지 (%)
		1. int n = 10;
		2. int n2 = 3;
		3. n/n2 하면 3.333 이 아니라, 3이 나온다.
	4. System.out.println(10/3) ==> 소수점 표현할려면
		1. System.out.println(10/3.) 으로 바꾸면 된다.
	5. 연결 연산자: + ===> 문자열과 값을 + 했을때는 연결이 된다.
		1. 여러개의 값을 하나의 값으로 만들때 사용한다.
	6. 대입 연산자 - 다음은 동일하다
		1. 변수 *= 값 
		2. 변수 = 변수 * 값
	7. 비교 연산자
		1. ==
		2. !=
		3. >
		4. >=
		5. <
		6. <=
		7. 앞에 있는 연산자가 기준이고 뒤에 있는 연산자가 비교 대상이다.
		8. 실행 결과는 논리값 (true/false) 를 반환한다.
	8. 논리 연산자
		1. && (앰퍼샌트) - 그리고
			1. true && true == true
			2. true && false == false
			3. false && true == false
			4. false && false == false
		2. ||  - 또는
			1. true || true == true
			2. true || false == true
			3. false || true == true
			4. false || false == false
		3. ! 부정 연산자
			1. !true = false
			2. !false = true
		4. 연산자 앞뒤로 논리값 (true/false) 가 온다. 
	9. 증감 연산자
		1. 증가 연산자 ++ : n 값을 1 증가
		2. 감소 연산자 -- : n 값을 1 감소
		3. ++n => 전치 - 먼저 증가 또는 감소 
		4. n++ => 후치 - 나중에 증가 또는 감소
		5. 전치, 또는 후치에 따라 저장되는값이 다를수 있다.
			1. 변수 = ++n : 먼저 증가하고 나중에 변수에 할당
			2. 변수 = n++ : 먼저 할당하고 나중에 증가.
				1. int m =10;
				2. int new_m = ++m;
				3. int new_m = m++;
	10. 삼항 연산자
		1. 피연산자가 3개이다.
		2. 문법: 
			1. 변수 = (조건식) ? 참값 : 거짓값;
			2. 조건식에는 비교연산자와 논리연산자가 있다.
			3. 조건식이 true 일경우 변수에 참값을 할당하고
			4. 조건식이 false 일경우 변수에 거짓값을 할당한다.
		3. 3항연산자는 중첩이 가능하다.
			1. 변수 = (조건식) ? 참값 : 3항연산자;
			2. 예) age 값이 70보다 크면 노년, 50보다 크면 '장년', 아니면 '청년을" 반환해서 변수에 저장하라.
				1. int age = 40;
				2. String age2 = (age > 70) ? "노년" : ((age > 50) ? "장년" : "청년");
				3. System.out.println(age2);
		4. 

2. 표준 입력 (키보드)
	1. Scanner 클래스 사용
		1. Scanner sc = new Scanner(System.in);
		2. System.in 이 키보드를 의미한다.
		3. 기본적으로 키보드에서 입력데이터는 모두 문자열로 처리된다.
			1. 숫자를 입력해도 문자열로 인식된다.
		4. Scanner는 숫자용 그리고 문자용 메소드가 제공된다.
			1. int n = sc.nextInt();
			2. String line = sc.nextLine(); ---> 한줄을 읽는다.
			3. String s = sc.next(); ----> 한단어의 문자열을 읽는다.
		5. 입력받는 데이터가 불분명할 경우 문자열 (next) 로 입력받은다음 원하는 데이터 타입으로 변환한다.

- 문자열을 숫자로 바꾸는 방법:
	- String s = "20";
	- int n = Integer.parseInt(s);

3. 문장
	1. 실행문
		1. 순차문
			1. 순차적으로 실행되는 문장. 
			2. 끝에 ; 가 있다.
		2. 제어문
			1. 분기문 (조건문)
				1. 단일 if 문
					1. 조건이 참인 경우에만 실행시킬 때 사용.
				2. if~else 문
					1. 조건에 따라서 실행하는 문장이 달라질때 사용
				3. 다중 if 문
					1. 조건이 여러개인 경우에 사용
					2. 문법: if~else if~else
				4. switch 문
					1. 조건이 여러개인 경우에 사용.
					2. 문법: switch(변수) { case 값1: 문장1; break; ... default: 기본문장; }
					3. default문은 옵션이다.
					4. break문도 옵션이다.
					5. 변수와 값의 비교는 내부적으로 == 비교한다.
					6. "switch" + ctrl + space ===> switch문 자동완성
					7. switch 문에는 long, float, double, boolean 은 사용 불가능하다.
						1. switch문에서 지원되지 않는 데이터 타입인 경우에는 그냥 다중 if문을 사용하면 된다.
					8. byte short int char String enum 은 사용 가능하다.
					9. 
					10. 
			2. 반복문
				1. for 문
					1. 문법: for(초기값; 조건식; 증감식) { ... }
					2. 초기값과 증감식을 여러개씩 적을수도 있다.
						1. for(int n=1, m=1; n<10 && m<2; n+=2, m++){  ... }
					3. 모든 제어문은 중첩 가능하다.
						1. if() { if () { for() { ... } } }
				2. while 문
				3. do~while 문
			3. 조건에 따라서 실행되는 문장.
	2. 비실행문
		1. 주석문
			1. 한줄 주석문: //
			2. 여러줄 주석문: /* */
- 변수와 블록 { ... } 의 관계
	- 변수가 블록 안에 정의 되었을 경우 블록 밖에서는 사용할 수 없다.


















