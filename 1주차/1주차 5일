2차원 배열
정방형 배열
n x m 의 직사각형 배열


사용방법:
new 이용
문법:
int[][] n = new int[2][3];
n[0][0] = 1;
n[1][1] = 5;
n[1][2] = 6;
값 이용
문법:
int[][] n = { {1,2,3}, {4,5,6} };
new + 값
문법:
int[][] n = new int[][]{ {1,2,3}, {4,5,6} };
배열의 길이
행의 길이 : n.length
열의 길이 : n[0].length
출력방법:
foreach문을 이용한 출력방법:
for(int[] x : n) {
for (int x2 : x){
...
}
}
Arrays 를 이용한 출력방법:
System.out.println(Arrays.deepToString(n));
비정방형 배열
각 행의 열이 다른 길이를 가지고 있는 배열
메모리면에서 정방형 배열보다 더 효율적이다.
정방형같은경우에는 중간중간 안쓰는 원소가 있을수 있다.
사용방법
new 이용
문법:
int[][] n = new int[3][];
열의크기를 지정하지 않는다.
n[0] = new int[2];
n[1] = new int[1];
n[2] = new int[3];
값 이용
int [][] n = { {1,2} , {3}, {4,5,6} };
new + 값 이용
int [][] n = new int[][] { {1,2} , {3}, {4,5,6} };


args
public static void main (String[] args)
javac Test.java - 컴파일
Test.class 생성
java Test (값1) (값2) ... 실행
예) java Test 10 20
값1, 값2, ... 의 값들이 String[] args에 저장된다.
숫자가 아닌 문자열 배열의 형태로 저장된다.
args 초기화 하는법:


string_prompt 를 사용하면 실행시마다 input 값을 console 로 물어본다.




클래스
자바는 객체지향프로그래밍이다 (OOP: Object Oriented Programing)
자바: "객체를 잘 이용해서 프로그래밍 하자!"
객체 (object)
'사물' 의 의미.
우리 (주체 subject) 눈에 보이는 물건(사물)을 의미한다.
예) 모니터, 책상, 강사, ...
객체 구성요소
속성: 객체정보
동작: 객체가 할수 있는 행위
예) 객체 : 모니터
속성: 크기 가격 생상 제조사 ...
동작: on/off,
예시)
객체를 재사용하기 위해서 main() 이 없는 재사용 클래스를 만든다.
Student 클래스
재사용 클래스
혼자서는 실행 불가, 다른 클래스 (TestStudnet) 도움(객체 생성, new) 으로 로딩 가능
TestStudent 클래스 (handling class)
Student 객체를 사용하는 클래스
학생정보를 저장하기 위해서 Student 클래스 이용한다
Student 클래스는 main메서드가 없기 때문에 독자적으로 메모리에 로딩이 안된다.
따라서 main메서드에서 Student클래스 (모든클래스)가 메모리에 올라갈수 있도록 (로딩) 도와줘야된다.
이 작업을 '객체생성' 한다고 부른다.
객체 생성 문법:
클래스명 변수명 = new 클래스명();
Student s = new Student();
데이터타입이 Student 인 로컬변수 s 생성
new 키워드로 인해 Student 객체 heap 메모리에 생성
heap 메모리에 생성된 Student를 인스턴스 라고 한다.
Student() 로 인해 생성자 호출
로컬변수 s 에 인트턴스 주소값 저장
클래스 구성요소
변수 (인스턴스변수, static 변수)
데이터 저장
메서드
변수값 변경 및 조회
생성자 (Constructor)
변수 초기화
메서드 처럼 호출해야 수행이 되고 끝나면 호출한곳으로 돌아온다 ( method-like )
new 할때 호출해서 수행이 된다.
new 클래스명();
이 호출하는 메서드를 caller 라고 한다.
호출할때는 문법에 맞게 호출해야된다.
파라미터의 갯수가 일치해야되고,
타입이 일치 해야되고
순서가 일치해야된다.
호출할때 parameter를 지정할수 있다.
new Student( 값, 값2);
문법:
public 클래스명 () { ... }
메서드에 의해 호출되는것이므로 (callee) 라고 한다.
마찬가지로 parameter 변수들을 설정해줄수 있다.
public Student (변수, 변수) { ... }
클래스에 생성자가 없으면 자동으로 생성해준다.
자동생성된 생성자를 기본 생성자 (default constructor) 라고 부른다.
모든 클래스에는 생성자가 명시적으로 없으면 기본생성자는 항상 자동으로 제공된다.
명시적으로 있으면 기본생성자는 자동으로 제공 안됨.
생성자에 파라미터 없이 만드는것과 있이 만들때의 차이점:

파라미터를 이용한 생성자를 사용할 경우, 기본생성자는 무조건 만들고 필요한 생성자를 추가하면된다.
오버로딩 (overloading)
기본생성자와 파라미터 생성자 두개가 있을경우 오버로딩이라고 한다. (Overload)
인자리스트가 다른 생성자.
public Student() { ... }
public Student(String name, int age, String address) { ... }
생성자 단축 버튼
Gernerate constructors from Superclass ===> 기본생성자 자동으로 만들어줌
Generate constructor using Fields ====> 파라미터 있는 생성자 자동 생성해줌


this 키워드
this 는 heap 메모리에 올라가있는 자기 자신을 참조할때 사용한다.
Dog d = new Dog();
d 는 다른 클래스에서 Dog 인스턴스를 참조하는변수이고,
this 는 재사용 클래스에서 자신의 인스턴스를 참조할때 사용된다.
인스턴스 변수들은 특별한 경우가 아닌한, 전부 private 으로 지정하고 외부에서부터 직접 접근 못하도록 보호한다.


자바 프로그램 개발 프로세스
고객 의뢰
요구사항 분석
객체 추출
예) 학원에서 학생관리를 위한 프로그램 개발을 의뢰 했을때
객체:
학생
속성: 학번, 이름, ...
동작:
교사
속성: ...
동작: ...
객체간 관계
설계
자바 클래스
학생 객체 -> Student 클래스
학생 속성 -> 변수(인스턴스 변수)
인스턴스 변수는 메서드 밖에 있으며 static이 없는 변수이다.
인스턴스 변수는 new 키워드로 객체 생성할때 만들어진다.
객체 생성마다 heap 메모리에 생성된다.
학생 동작 -> 메서드
구현
테스트
테스트와 구현 반복
배포


로컬 변수 vs 인스턴스 변수
파란색 변수는 인스턴스 변수이다
heap 에 저장된다
갈색 변수는 로컬 변수이다.
stack 에 저장된다.



접근 지정자 (접근 제어자, access modifier)
A 가 B 로 접근할때 B가 자기 자신을 보호하기위해 접근 가능한 클래스를 지정하여주는것
로컬변수 제외하고 모든곳에 쓸수 있다.
클래스, 생성자, 메서드, 인스턴스 변수, static 변수 들은 사용 가능
종류
public
제약 X
퍼블릭으로 지정하면 모두다 접근할수 있다.
protected
(default)
private
외부에서 접근 불가.
자기 자신만 접근 가능.


메서드 (method)
문법:
public 리턴타입 메서드명 (변수1, 변수 2, ...) {
...
return 값;
}
특징
호출해야 실행되고 끝나면 호출한 곳으로 돌아온다.
호출하는 방법은 객체 생성후에 변수.메서드() 형식으로 사용됨.
Getter / Setter 메서드
Setter
callee 메서드에 있는 값을 설정할때
Getter
worker 메서드에서 리턴값을 받는역할.
Setter + getter
두가지 기능을 모두 가지고 있지만 왠만하면 메서드마다 기능을 세분화 해 주는것이 좋다.
왠만하면 Setter 나 Getter로 나누어 주는것이 좋다.
메서드명
권장은 전부 소문자, 동사형으로 지정한다.







