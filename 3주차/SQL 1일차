-- SQL 주석문은  -- 이걸로 하는 것이다.

-- hr 계정 Lock을 풀고 비번을 설정

-- SQL은 대,소문자를 가리지 않는다  자바랑  다르다.  (( 변수발생!!  리터럴은 대,소문자 구별 ))


show user;  --->  사용자를 확인할 때 쓰임


alter user hr
identified by hr  account unlock;



-- 워크샵에서 사용할 계정을 생성한다. 그리고 권한을 할당

drop user workshop;    --> 삭제할 때 쓰임.

create user workshop
identified by workshop;

grant resource, connect    --> 권한을 주는 것
to workshop;




hr 계정은  문법을 정리하는 계정으로 사용할 것이다.
workshop 계정은  말그대로 워크샵을 할 때 쓰일 계정.


****  EMPOLYEE  ****
★★★★  공백으로 보이는 것은 착각이다 모두 __ 이런 아래 언더바로 표시된 형태다.  ★★★★


세로 줄은  칼럼 ,, 가로줄은  레코드 

표에서 비어있는 곳은  NULL값이다  NULL(값이 없다.)라는 의미다.  0이랑 다름 !!!!

**********  제약조건 ( 암기 ) ***************
primary key  --   레코드를 식별하기 위한 용도. 내부적으로 unique제약조건과 not null   제약조건을 포함한다.
                  자동으로 인덱스(index)가 생성됨
unique       --   컬럼에 유일한 값을 저장하기 위한 용도. null 값 포함 가능. 자동으로 인덱스(index)가 생성됨. 
not null     --   컬럼에 반드시 값을 저장해야 하는 용도. ( NULL값 허용 x )  애초엔 기본적으로는 NULL이 허용됨 )
check        --   자바의 조건처리와 비슷한 제약 조건 , 컬럼에 임의의 조건에 일치하는 데이터만 저장하기 위한 용도.
                  예>> 학년이 1학년만 저장, 성별이 ‘남’ 만 저장등
foreign key  --   하나의 테이블에서 다른 테이블을 참조하기 위해 사용되는 용도로서 ‘참조키’,‘외래키’ 라고 부른다.
                  EMPLOYEE ( 사원 )                                  departments ( 부서 )
                  
                  child 테이블       ------------------>>            master 테이블 
                  이쪽의 foreign key(외래키,참조키)는  
                  master의 컬럼 중에서 primary 키또는
                  unique 제약 조건에서 설정된 컬럼을
                  참조할 수 있다.


1.   SQL 문 종류

가. Data Query Language(DQL:질의어)  =    SELECT(데이터 검색시 사용)

나. Data Manipulation Language       =    INSERT(데이터 입력)            ** 기본적으로 메모리에서만 동작이 발생한다.
    DML:데이터 조작어)                    UPDATE(데이터 수정)
                                          DELETE(데이터 삭제)
                                          MERGE(데이터 병합)
 
다. Data Definition Language         =    CREATE(데이터베이스 객체 생성)
    (DDL:데이터 정의어)                    ALTER(데이터베이스 객체 변경)
                                          DROP(데이터베이스 객체 삭제)
                                          RENAME(데이터베이스 객체이름 변경)
                                          TRUNCATE(객체 정보 절삭)
 
라. Transaction Control Language      =   COMMIT(트랜잭션 작업 반영)
     (TCL:트랜잭션 처리어)                ROLLBACK(트랜잭션 작업 취소)

마.  Data Control Language            =   GRANT(권한 부여)
     (DCL:데이터 제어어)                  REVOKE(권한 취소) 
  
  
  
  ****   오라클 객체를 만드는 5가지 ( '다.' 의  CREATE 부분 ) ****
  
  1. 테이블 ★★★★( DDL을 이용 )       - 실제 Data 저장
  2. 인덱스                             -  검색을 빠르게 해준다. 일반 교재의 색인표           <테이블>
  3. 뷰 ( 테이블의 helper 역할 ) <창>   -  보안 + 복잡한 SQL 문을 간결하게 사용하는 목적      <테이블>
  4. 시퀀스 ( 오라클  )                 -  특정 컬럼 넘버링 ( ex)) 게시판의 글 번호 같은 것 )
  5. 시노닝                             -  테이블의 별칭을 사용 ( 왜냐면 보안을 위해서 )
                                          
                                          
  ****  Data Type ****
  
    - 수치 [정수]  : number ( ★자릿수 )
    - 수치 [실수]  : number ( 전체 자릿수 , 소수점 자릿수  )
    
    문자(열)  -- char     ( ☆byte수 )    --> 고정 길이  ( String )    --- 성능이 우수 
              -- varchar2 ( ☆byte수 )    --> 가변 길이  ( Stringbuilder )   -- 메모리 효율이 우수
                                          
             ex ))  char(4) 면    영문자는 4글자 , 한글은 2글자    
                    varchar2(4)면 영문자는 4글자 , 한글은 2글자
                    
                    남,녀는 char(1) 로 설정 가능 , 왜냐면 고정된 값이여서 그렇다.
                    
*****  Select 문  *****

1) Selection 기능 : SELECT 문 요청시 테이블의 '행'(레코드)이 반환되는 기능이다
2) Projection 기능: SELECT 문 요청시 테이블의 '열'(컬럼)이 반환되는 기능이다.
3) Join 기능:       여러 테이블에 공통적으로 존재하는 컬럼을 사용하여 한꺼번에 서로 다른 테
                    이블에 저장된 데이터를 가져오는 기능이다. 
                    
 모든 칼럼을 보려고 한다 
  --- *  을 친다
  
  특정 칼럼을 보려고 한다
  ----  , 을 친다
  
  
 *** Data 타입과 리터럴 ***   ★★x100
 
자바에서는  정수 리터럴은 10진수, 2 , 8 , 16진수
            실수 리터럴은 3.14, 지수 
            문자 리터럴은 'A'
            논리 리터럴은 true / false 
            문자열 리터럴은  "홍길동"
            
SQL에서는  수치 ---> 10 ,  3.14  
           문자 ---> 'A' ,  'ABC'  ( 문자든 문자열이든 ''만 쓴다. )
           날짜 ---> '2022/07/19'  ( 이것도 ' ' 를 쓴다 ) 이걸 안쓰면  키워드로 인식함.
           
           
   &&&&  " " 는 별칭에서만 사용한다.  &&&&
   
 ***  NULL  ***
 1. 테이블에서 비어있는 형태로 보임
 2. '값이 없음'  이라는  의미  ( 0은 다르다  0은 값이 표현이 된 것이다. )
 3. 연산시  결과가  Null 반환
 4.  NVL 함수 
 5. 정렬할 때 가장 큰 값으로 인식 
 6.  is null 연산자 ( Null 값일 때 사용 ) , is not null 연산자 ( Null 값이 아닌 경우에 쓴다 )
 7. 기본적으로 table에는 Null 허용 ,  not null 제약 조건으로는 금지  
      ( 허용 ---> 허용x 이므로 변경이다 !! )
      
      null --> not null       --------> 변경
      primary , check , unique , foregky(프렌키)  ----> 추가
      
문법 NVL( 컬럼명, 값 )
  - 첫 번째로 지정된 컬럼명의 값이 널(null)이면 두 번째로 설정한 값으로 바꾸어서 
    처리가 되고 만약 첫 번째로 지정된 컬럼이 널(null)이 아니면 컬럼값 그대로 사용된다
    
1.  항상 실행 결과는 전체 레코드가 반환  ( Distinct 제외 )
   select 절       --> 항상 107개
   from 절 

2. 조건 지정해서 일치할 레코드만 출력
   
   select             --- 0 ~ 107 개
   from
   where  조건식;
                    
  ***********   비교 연산자    **********
     =                    같다
    !=  ,<> , ^=          같지 않다
     >                    보다 크다
    >=                    보다 크거나 같다
     <                    보다 작다
    <=                    보다 작거나 같다
 
3. In 연산자는 값을 여러개 찾을 때 쓰인다.
  -->   WHERE 컬럼명 IN ( 값1, 값2, 값3,.....,값n );  // 즉  결합 방식 마냥
  
4. LIKE (_,%) 연산자 

   %      -->      %위치에 0개 이상의 문자(열)과 대체
   _      -->      _위치에 반드시 1개 문자와 대체    
   
   
---->>  _ 나 % 가진 이름은???  where name Like ' %_%'  ( 와일드카드 인식 )
         escape ' $ '  $ 뒤에 있는 _ or % 는 와일드 카드 x 
         
 5.  논리 연산자
 
 AND     두 가지 조건을 모두 만족하는 데이터를 검색한다. 
         ex))  SELECT * FROM employees WHERE employee_id=100 AND job_id='AD_VP';
 OR      두 가지 조건 중에서 한 가지만 만족하더라도 검색한다. 
         ex))  SELECT * FROM employees WHERE salary >= 30000 OR job_id='AD_VP';
 NOT     지정된 조건이 아닌 데이터를 검색한다. 
         ex))  SELECT * FROM employees WHERE NOT employee_id=100;
 
 
 6.  NOT 연산자 
 
 -  not( 부정 ) 연산자 사용시 인덱스 사용 X
 
 
   연산자 우선순위 설명
1    괄호( )
2    NOT 연산자
3    비교 연산자
4    AND 연산자
5    OR 연산자

    
