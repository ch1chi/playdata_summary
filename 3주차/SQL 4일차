*********** 서브 쿼리    


( 조인 ) ---> 조회하고자 하는 Data가 여러 테이블에 분산되어 있어서 테이블 연결 ( 조회 조인 )
--- 개념 : 한번의 select 문으로는 원하는 Data 조회 불가능해서 여러 select 문이 필요하다.

select 
from    <-------- 이것이 main 쿼리
where   컬럼명  ★★★연산자★★★  ( select from .... );   <---- 서브 쿼리는  1. 단일행 
                                                                              2. 다중행  



하나의 SELECT문이 아닌 여러 개의 SELECT문을 사용해야 원하는 결과를 조회할
수 있는 경우가 있는데 이러한 경우에 서브쿼리를 사용할 수 있다. 즉, 서브쿼리는 여러 번
의 SELECT문을 수행해야 얻을 수 있는 결과를 하나의 중첩된 SELECT 문으로 쉽게 얻을
수 있도록 지원


***********   서브 쿼리 종류

1. 단일행   :   서브쿼리 실행 결과가 한 개의 행을 반환한다   (  =, >, >=, <, <= ,!= 와 같은 비교 연산자 )
2. 복수행   :   서브쿼리 실행 결과가 복수 개의 행을 반환한다. ( IN, ANY, ALL, EXIST 연산자 )

    가.  복수행 연산자
    
       (1) IN    ---->  메인 쿼리와 서브 쿼리가 IN 연산자로 비교한다. 
                        서브쿼리 결과값이 복수개인 경우에 사용된다
       (2) ANY    --->  ANY 연산자는 복수행 서브쿼리에서 > 또는 < 같은 비교 연산자를
                        사용하고자 할 때 사용되며 검색 조건이 하나라도 일치하면 참이다.
       (3) ALL    --->  ALL 연산자는 복수행 서브쿼리에서 > 또는 < 같은 비교 연산자를
                        사용하고자 할 때 사용되며 검색 조건의 모든 값이 일치하면 참이다. 
                        
       (4) EXIST  --->  서브 쿼리의 반환값이 존재하면 메인 쿼리를 실행하고 반환값이 없으면
                        메인 쿼리를 실행하지 않는다.
   
   
   ( 1 ) IN  
      IN 연산자는 서브쿼리 반환값이 복수이고 메인 쿼리와 동등 연산자(=) 방식으로
      비교할 때 사용하는 연산자이다. 
      다음은 이름인 Whalen 또는 Fay 사원과 같은 월급을 받는 모든 사원들의 정보를
      출력하는 SQL문이다.
       
   ( 3 ) ALL 
   
        > ALL (서브쿼리)   ----> 서브쿼리에서 반환된 모든(all) 데이터보다 큰 데이터를
                                 메인 쿼리에서 조회한다. 결국 서브쿼리에서 반환된 최대값 보다 큰 
                                 데이터를 조회할 때 사용하는 서브쿼리이다.
                                 
        < ALL (서브쿼리)   ---->  서브쿼리에서 반환된 모든(all) 데이터보다 작은 데이터를
                                  메인 쿼리에서 조회한다. 결국 서브쿼리에서 반환된 최소값 보다 
                                  작은 데이터를 조회할 때 사용하는 서브쿼리이다.
                                  
                                  
                                  
     ****  Exists 연산자
     
     select 
     from 
     where  exists (       )   ---> 실행
     
     존재하면  main 쿼리가 실행된다.
     
     
     즉  ,  (    ) 안에 결과값이 존재하면 단일행, 다중행 실행.
             존재하지않으면  결과값 존재 X 
             
             
  select                                  |       select 
  from   employees e,  d____              |       from employees _____
  where  e. department _ id = d.          |
             
  *********   SQL 종류
  
   1) query language  :    select 문    ---  projection 기능 : 컬럼 선택 ==> select 컬럼
                                        ---  selection  기능 : 행 선택   ==> where 조건식
                                        ---  join       기능 :  t1 , t2 연결 하는 조인
                                        
                ----->  select       * , 컬럼명 , 모든 컬럼 , 연산 가능 , 별칭 , || , 함수 , distinct , 서브쿼리
                        from       ( table, 서브쿼리 ( 별칭 , 인라인뷰 )
                        where        조건식 (    1. 비교 연산자 ===> 각종 부등호 ,               )
                                            (    2. 범위        ===> between A and B             )
                                            (    3. 여러개      ===>  In ( 값1 , 값2 )           )
                                            (    4. like        ===>  % : 0개 이상의 문자 치환   )
                                            (                         - : 반드시 1개 문자 치환    )
                                                                     
                                                 5. 논리 연산   ===>  and  or  not
                                                 6. is null     ===> high , low
                        group by      
                        having            ------ >>  조건식
                        order by          ===> 컬럼명 asc , desc
                                          ===> 별칭
                                          ===> 순서
*******************************************************************************
1.     조인                                                   2. 서브 쿼리
  (1) 용도 : Data가 여러 테이블에 분산되어 있다.                   (1) 용도 : 한번의 select 문으로 안될 때
   
  문법 :  오라클 조인  --- equi 조인 ( =연산자) ( inner )          (2) 문법 : select
                       --- non-equi 조인 ( 부등호 연산자 )                    from
                       --- outer 조인 : (+)연산자                             where 컬럼 연산자
  
          ANSI   조인  === nature 조인                             (3) 주의할 점 : 단일행 : 단일행 연산자 ( 부등호 ) 
                       === using  조인                                             복수행 : in , >all , >any ,exists
                       === On 조건식 ( 부등호 연산자 )
                 
  **** DML ( 데이터 조작어 )   +  tcl ( transaction control language ) (( 1. commit ,  2. rollback ))
  
  1. insert 문 : 레코드(행) 생성  ( 단일행 , 다중행 , 같은 테이블 , 다른 테이블 )
  
 <<  ★권장!!! 왜냐? 가독성이 좋아서 >>    insert into table 명  ( 컬럼명1, 컬럼명2   , .....);   ---> 생략된 컬럼은 null로 자동 저장됨 (단, 생략 가능한 컬럼은 not null 제약 조건 X ) 
                                          values ( 값1 , 값2 ,.....);  <  1:1 대응 >
     
     
     insert into table명 ---->> 반드시 저장할 값을 컬럼 순서와 일치해야 설정 ++ 모든 값을 지정
     
     
  *********************
  update ( 수정 )
  
    --- 1. where 절x ==> 전체 레코드 수정 ( update 테이블명  set 컬럼명=변경값 , 칼럼 변경값 )
    
    
    --- 2. where 절o ==> 조건에 일치할 레코드만 수정 ( 99% )  < update 테이블명 set 컬럼명=값 , 컬럼 = 값 where 조건식; >
                     --->>>  (( where 조건식; 은  selection임 )) 
    
  ***********************
  Delete ( 삭제 )
  
    ---1. where x ==> 전체 레코드 삭제
    
    ---2. where o ==> 조건에 일치하는 레코드만 삭제 ( 99% )
    
    
    ★★★★★★★★ update , delete ★★★★★★★★  +++ subquery 서브 쿼리도 쓰임
    
    
      항상 Commit // rollback  사용한다 기억해두자 !!! 
      
      
**********************
 1.  트랜잭션 
    개념 : 여러 개의 DML 작업을 하나의 작업처럼 처리하는 개념
    
     (1) insert                이 4개를 1개로 하는게 트랜잭션 !! ---> 무결성 보장
     (2) delete
     (3) update
     (4) 
      
