
if True : # 명제가 참이라서 1, 2가 한줄에 하나씩 출력될 것이고 
    print ("1")
    print ("2")
else : # 명제가 참이니까 안 거치고 넘어갈 것이고 
    print("3")
    
print("4") # 들여쓰기가 안 되어있으므로 그냥 출력 

------------------------------------------------------------
# 번호 입력받기
# 특정 변수에 저장 
# 저장한 str의 앞 3글자만 띠어서 비교 
# 조건에 따라 if~elif~else로 확인

phone = input('번호를 입력해주세요: ex) 019-xxxx-xxxx  ')
if phone[:3] == '011':
    print('SKT')
elif phone[:3] == '016':
    print('KT')
elif phone[:3] == '019':
    print('LGU')
else:
    print('알수없음')
    
    -----------------------------------------------------------
    # 입력 받고
# 입력받은 값이 '키'로 존재하는지 fruits에서 확인
# 있으면 value, 없으면 '영단어도 입력해주세요' 
# 키: 밸류 형태로 fruits에 추가 
# 더 간결하고 효율적인 코드를 고민해보세요 
fruit = input('과일 이름을 한글로 입력하세요')
if fruit in fruits: # in 이라는 명령어는 dict에서는 key에서 작동  fruits.keys()
    print(fruits[fruit])
else:
    fruits.setdefault(fruit,input('사전에 없는 단어입니다 영단어도 입력해주세요 '))
    print(fruits)

-----------------------------
주사위 게임

# a.strip('-')
a = input('1~6 사이의 숫자를 입력하세요: ')
b = input('1~6 사이의 숫자를 입력하세요: ')

# 처음에 값을 받아서 얘가 숫자만 들어있는지 판별 해주는 조건문 
if a.lstrip('-').isdigit() and b.lstrip('-').isdigit(): # 조건을 판단할 때는 앞에 - 부호를 빼고 숫자인지 판별하지만, 
                                                                      # 조건문 안으로는 - 부호를 포함한 a 가 들어갈 겁니다 
    a = int(a) # ValueError: invalid literal for int() with base 10: '가'
    b = int(b)

    if 0 < a < 7 and 0 < b < 7:
        if a > b:
            print('a가 이김')
        elif a < b:
            print('a가 짐')
        else:
            print('비김')
    else:
        print('1-6 사이의 숫자보다 크거나 작은 숫자를 입력하셨습니다')
else:
    print('문자를 입력하신 모양입니다')
    
    
    
★★★★★  논리 연산자 
        not, and, or 순으로 우선 판단
        단락평가를 한다
        단락평가란? short-circuit evalution
        첫번째 값으로 결과가 확인하면 두번째 값은 평가하지 않는 방법
        ~ & | : 비트연산자 - 비트 단위로 논리 연산 (not, and, or 과 다른 방식으로 작동)
        
        &    대응되는 비트가 모두 1이면 1을 반환함. (비트 AND 연산)
        |    대응되는 비트 중에서 하나라도 1이면 1을 반환함. (비트 OR 연산)
        ^    대응되는 비트가 서로 다르면 1을 반환함. (비트 XOR 연산)
        ~    비트를 1이면 0으로, 0이면 1로 반전시킴. (비트 NOT 연산)
        
        
        예제 : 중첩 조건문
        
        중첩 조건문으로 만들어 보겠습니다.
        1번째 층위

        18살보다 어린지만 판단하고 우쭈주 출력 후에
        18살보다 어린 사람 중에 13살 미만이면 어린이입니다
        13살 이상이면 청소년입니다 를 더해서 출력하는 중첩 조건문
--->
---> 
        age = int(input('나이를 입력하세요: '))

        if age < 18: # 18 미만인지 판별
            print('우쭈쭈') # 18 미만이면 무조건 실행되는 명령문
            if  age < 13:  # 13 미만이면 
                print('어린이입니다') # 실행
            else: # 13 <= age < 18
                print('청소년입니다')
        else:
            print('어른입니다')
            
문제 2 :
1. id가 맞는지 확인하고, '비밀번호 입력하세요'
2. id, 비밀번호 다 입력받고, 둘중에 뭐가 틀렸는지 알려주기
3. id, 비밀번호 모두 맞으면 '로그인 되셨습니다', 둘중에 뭐라도 틀리면 '로그인 불가' -> 지금 한 것
4. 새로 가입하시겠습니까? 까지 구현해보세요

        id = 'abcd'
        pw = '1234'
        login = False # flag 

        user_id = input('user_id: ')
        user_pw = input('user_pw: ')

        while not login: # 로그인이 False인 상태에서는 user_id와 user_pw를 계속 물어보고 
          if user_id == id and user_pw == pw: # 조건 만족하면 조건문 탈출
            print('로그인 되셨습니다.')
          elif user_id == id:
            print('비밀번호를 확인하세요.')
            user_id = input('user_id: ')
            user_pw = input('user_pw: ')
            continue
          elif user_pw == pw: # 비번이 틀리면 다시 로그인을 확인받고 
            print('아이디를 확인하세요.')
            user_id = input('user_id: ')
            user_pw = input('user_pw: ')
            continue
          else:
            print('로그인을 다시 시도하세요.')
            if input('아니면 새로 가입하시겠습니까? Y/N  ').upper() == 'Y':
              id = user_id
              pw = user_pw
            else:
              user_id = input('user_id: ')
              user_pw = input('user_pw: ')
              continue
          print('로그인 되셨습니다.')
          login = True
