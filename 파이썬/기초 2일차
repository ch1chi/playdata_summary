

★★★★  append / extend라는 명령어

    리스트에 원소를 추가하는 명령어
    리스트에만 사용이 가능합니다.
    하나만 추가할때 여러개를 한께번에 추가할 때
  
  
★★★★ range
   
    범위 내에서 수열을 생성하는 시퀀스 타입입니다.
    정수만 가능하고요
    반복문이랑 가장 많이 쓰이는 명령어 중 하나입니다.
    range(시작점, 끝점+1, step)

    시작점과 step은 생략 가능하다
    
    
★★★★    매핑형 타입
  tuple, list, range는 시퀀스형 타입이었습니다. 순서가 있고 그 순서에 정해진 인덱스를 바탕으로 자료를 꺼내오거나 삽입하거나 삭제하거나 수정하는 방식으로 동작했습니다.
  매핑형 타입은 key값으로 불러오는 dict가 대표적이고요.
  해시 자료구조 라고 표현하기도 합니다.
  딕셔너리
  형태는 다음과 같습니다. { key:value, key:value, key:value ..... }
  key를 직접 정의할 수 있습니다.
  튜플이나 리스트와의 차이점이죠 (인덱스가 자동 생성되지 않음)
  반드시 숫자가 아니어도 괜찮음
  해시 테이블의 장단점

★★★★  장점
  데이터 저장 및 읽기 속도가 빠르다.
  키에 대한 중복이 있는지 확인하기 쉽다.

★★★★  단점
  일반적으로 다른 자료구조보다 저장공간이 더 필요하다.
  여러 키에 해당하는 주소가 동일한 경우 충돌(Collision)이 발생하고, 이를 해결하기 위한 별도 자료구조 또는 함수가 필요하다.

★★★★  해시 테이블의 주용도
  검색이 많이 필요할 경우
  저장, 삭제, 읽기가 빈번하게 일어나는 경우
  캐시를 구현할 경우 (중복 확인이 쉽기 때문에)
  
  
  --->> # 빈 딕셔너리를 만드는 법
#     () []
     dict1 = {}
#    또는 2개의 데이터 집합 사이에 1:1의 대응 관계를 설정하는 것.
  
  
★★★★  Set (집합)
    순서가 없는 자료형입니다
    중복이 안된다는 특징이 있습니다.
    
 ★★★★  복사
    얕은 복사(shallow copy), 깊은 복사(deep copy)가 있습니다.
    주소복사, 값 복사라고 표현하기도 합니다.
    
    
★★★★★★★★    조건문(분기문)
    파이썬은 if문 하나만 제공을 합니다.
    쉽죠. if문 하나만 있으니까
    파이썬의 철학 기억나시죠?
   
    if 명제:
    [들여쓰기]명령어들
    [ ]
