-------파이썬------------
#  1.  자료

    프로그래밍(코딩)을 하는 대상을 자료라고 합니다.
    파일(엑셀, 그림, 텍스트, ... ), 문자, 숫자,...
    자료의 형태는 기본적으로 문자 혹은 숫자 둘중 하나입니다
    문자도 결국 바이너리코드가 되면 숫자이니 정확히 말하자면 숫자 하나..
    숫자를 RGB로 해석하면, 색정보, 문자 인코딩을 하면 문자, ...
    결국, 컴퓨터에서 보여지는 모든 것들은 전부 숫자로 표현 가능
    파이썬의 타입은 여러가지가 있는데

    기본 타입은 숫자( 정수, 실수 )
    파이썬의 기본 타입은 자료를 구성하는 가장 기본적인 최소 단위
     ★★★★ 파이썬의 자료타입 중에 가장 먼저 숫자


#  2. 정수(INTEGER)
      int 라고 표현
      음수, 양수, 0 3가지가 있습니다
      4바이트를 할당해요 - 웬만한 숫자는 다 들어감
      속도는 좀 느려집니다.

#  3. 실수(Float)
    파이썬에서는 float 하나만 제공
    부동소수점 방식
    움직이는 소수점 방식 이라는 뜻입니다. (부유하다)
    소수점 위치가 고정되어 있지 않고 바뀐다는 의미입니다.
    인터프리터의 오차라고 할까요
    
#  4. 문자열 (string)
    파이썬에서는 float 하나만 제공
    부동소수점 방식
    움직이는 소수점 방식 이라는 뜻입니다. (부유하다)
    소수점 위치가 고정되어 있지 않고 바뀐다는 의미입니다.
    인터프리터의 오차라고 할까요
    
    
★★★★    문자열 이스케이프
    문자를 사용할 때 충돌이 발생하는 경우들이 있습니다.
    우리가 사용하는 문자로써가 아니라 파이썬 인터프리터에서 이미 용도가 정해진 문자들이죠.
    This's a dog - 어퍼스트로피는 파이썬에서 이미 약속된 규칙으로 문자열의 앞뒤를 감싸주는 작은따옴표와 기호가 같습니다. -> 파이썬 인터프리터에서의 역할과 우리가 입력하는 자료로서의 역할이 충돌을 합니다.
    충돌을 막기 위해서 역슬래시()뒤에 그 문자, 혹은 그 문자를 의미하는 약어를 사용하는 방법으로 충돌을 피하는 것 : 이스케이핑 이라고 부릅니다.
    
    ex) print('안녕하세요\t좋은아침입니다\n저는 \s김연지\b\b입니다\'') # \s 
        print('안녕하세요\n좋은아침입니다')
        print('안녕하세요\n    좋은아침입니다') # 띄어쓰기도 하나의 문자입니다!   <-- 이것 중요 포인트
      
      
★★★★    시퀀스 타입 - 순서
    기본 타입(숫자, 문자열)을 여러개 모아서 하나의 자료형으로 관리하기 위한 방법
    '배열'
    한개 식빵 -> 숫자, 문자열이라면
    시퀀스 타입 -> 식빵들 ... 자료구조의 종류
    파이선에서 제공하는 시퀀스 타입

    리스트

    배열
    가장 많이 사용하는 자료형입니다
    선형자료구조 라고 부릅니다
    튜플(tuple)

    리스트와 본질적으로 같아요. 자료 값을 변경할 수가 없습니다.
    튜플로 만들면 - 내부의 자료값을 변하게 하지 않았게 라는 약속입니다.
    레인지

    수열을 만든다
    가변형 타입 vs 불가변형 타입

    튜플 -> 불가변형 타입

    자료들의 값을 바꿀 수 없고
    리스트 -> 가변형 타입

    자료들의 값을 변경할 수 있습니다.
    가변형 타입에서만 사용할 수 있는 연산자가 띠로 있기 때문입니다.

    세트
    딕셔너리  
    
    
★★★★    인덱싱과 슬라이싱
    파이썬의 시퀀스 타입은 자동으로 인덱스를 생성해줍니다.

    0부터 순서대로 1씩 증가하면서 자동으로 만들어줍니다.

    0부터 시작한다라는 겁니다.

    첫번재 원소 인덱스가 0이고,

    [ ] 안에 인덱스 숫자로 참조하길 원하는 원소를 선택을 합니다

    슬라이스는 시퀀스 내에서 원하는 범위를 잘라서 가져오는 개념입니다.

    프로그래밍에서는 반복문, 반복문을 활용한 인덱싱/슬라이싱을 많이 하게 됩니다
    
   < 슬라이스의 사용법 >
   arr [ 시작인덱스 : 끝인덱스+1]
